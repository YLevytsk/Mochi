// vite.config.js
import { defineConfig } from "file:///C:/Users/lupin/Documents/Mochi/node_modules/vite/dist/node/index.js";
import react from "file:///C:/Users/lupin/Documents/Mochi/node_modules/@vitejs/plugin-react/dist/index.mjs";
import fs from "fs";
import path from "path";
var vite_config_default = defineConfig({
  base: "/Mochi/",
  // ✅ Для GitHub Pages
  plugins: [react()],
  build: {
    outDir: "dist",
    emptyOutDir: true,
    assetsDir: "assets",
    rollupOptions: {
      input: "index.html",
      // ✅ Главный HTML-файл (Vite найдёт `main.jsx`)
      output: {
        entryFileNames: "index.js",
        // ✅ `main.jsx` → `dist/index.js`
        chunkFileNames: "assets/[name]-[hash].js",
        assetFileNames: "assets/[name]-[hash][extname]"
      }
    }
  },
  esbuild: {
    jsx: "automatic"
    // ✅ Автоматическое преобразование JSX
  }
});
var distDir = path.resolve("dist");
var assetsDir = path.join(distDir, "assets");
if (!fs.existsSync(assetsDir)) {
  fs.mkdirSync(assetsDir, { recursive: true });
}
var foldersToCopy = ["css", "images", "components"];
foldersToCopy.forEach((folder) => {
  const sourcePath = path.resolve(folder);
  const targetPath = path.join(assetsDir, folder);
  if (fs.existsSync(sourcePath)) {
    fs.mkdirSync(targetPath, { recursive: true });
    fs.readdirSync(sourcePath).forEach((file) => {
      fs.copyFileSync(path.join(sourcePath, file), path.join(targetPath, file));
      console.log(`\u{1F4C2} Copied ${file} to dist/assets/${folder}/`);
    });
  }
});
var indexHtmlPath = path.resolve("index.html");
var targetIndexHtmlPath = path.join(distDir, "index.html");
if (fs.existsSync(indexHtmlPath)) {
  fs.copyFileSync(indexHtmlPath, targetIndexHtmlPath);
  console.log(`\u{1F4C2} Copied index.html to dist/`);
}
var indexJsPath = path.join(distDir, "index.js");
if (!fs.existsSync(indexJsPath)) {
  console.error("\u274C \u041E\u0448\u0438\u0431\u043A\u0430: `index.js` \u043D\u0435 \u0431\u044B\u043B \u0441\u043E\u0437\u0434\u0430\u043D! \u041F\u0440\u043E\u0432\u0435\u0440\u044F\u0439 `main.jsx`.");
  process.exit(1);
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxsdXBpblxcXFxEb2N1bWVudHNcXFxcTW9jaGlcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXGx1cGluXFxcXERvY3VtZW50c1xcXFxNb2NoaVxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvbHVwaW4vRG9jdW1lbnRzL01vY2hpL3ZpdGUuY29uZmlnLmpzXCI7LyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xyXG5pbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI7XHJcbmltcG9ydCBmcyBmcm9tIFwiZnNcIjtcclxuaW1wb3J0IHBhdGggZnJvbSBcInBhdGhcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgYmFzZTogXCIvTW9jaGkvXCIsIC8vIFx1MjcwNSBcdTA0MTRcdTA0M0JcdTA0NEYgR2l0SHViIFBhZ2VzXHJcbiAgcGx1Z2luczogW3JlYWN0KCldLFxyXG4gIGJ1aWxkOiB7XHJcbiAgICBvdXREaXI6IFwiZGlzdFwiLFxyXG4gICAgZW1wdHlPdXREaXI6IHRydWUsXHJcbiAgICBhc3NldHNEaXI6IFwiYXNzZXRzXCIsXHJcbiAgICByb2xsdXBPcHRpb25zOiB7XHJcbiAgICAgIGlucHV0OiBcImluZGV4Lmh0bWxcIiwgLy8gXHUyNzA1IFx1MDQxM1x1MDQzQlx1MDQzMFx1MDQzMlx1MDQzRFx1MDQ0Qlx1MDQzOSBIVE1MLVx1MDQ0NFx1MDQzMFx1MDQzOVx1MDQzQiAoVml0ZSBcdTA0M0RcdTA0MzBcdTA0MzlcdTA0MzRcdTA0NTFcdTA0NDIgYG1haW4uanN4YClcclxuICAgICAgb3V0cHV0OiB7XHJcbiAgICAgICAgZW50cnlGaWxlTmFtZXM6IFwiaW5kZXguanNcIiwgLy8gXHUyNzA1IGBtYWluLmpzeGAgXHUyMTkyIGBkaXN0L2luZGV4LmpzYFxyXG4gICAgICAgIGNodW5rRmlsZU5hbWVzOiBcImFzc2V0cy9bbmFtZV0tW2hhc2hdLmpzXCIsXHJcbiAgICAgICAgYXNzZXRGaWxlTmFtZXM6IFwiYXNzZXRzL1tuYW1lXS1baGFzaF1bZXh0bmFtZV1cIixcclxuICAgICAgfSxcclxuICAgIH0sXHJcbiAgfSxcclxuICBlc2J1aWxkOiB7XHJcbiAgICBqc3g6IFwiYXV0b21hdGljXCIsIC8vIFx1MjcwNSBcdTA0MTBcdTA0MzJcdTA0NDJcdTA0M0VcdTA0M0NcdTA0MzBcdTA0NDJcdTA0MzhcdTA0NDdcdTA0MzVcdTA0NDFcdTA0M0FcdTA0M0VcdTA0MzUgXHUwNDNGXHUwNDQwXHUwNDM1XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDMwXHUwNDM3XHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDM4XHUwNDM1IEpTWFxyXG4gIH0sXHJcbn0pO1xyXG5cclxuLy8gXHUyNzA1IFx1MDQxM1x1MDQzMFx1MDQ0MFx1MDQzMFx1MDQzRFx1MDQ0Mlx1MDQzOFx1MDQ0MFx1MDQzRVx1MDQzMlx1MDQzMFx1MDQzRFx1MDQzRFx1MDQzRSBcdTA0M0FcdTA0M0VcdTA0M0ZcdTA0MzhcdTA0NDBcdTA0NDNcdTA0MzVcdTA0M0MgYGNzcy9gLCBgaW1hZ2VzL2AsIGBjb21wb25lbnRzL2BcclxuY29uc3QgZGlzdERpciA9IHBhdGgucmVzb2x2ZShcImRpc3RcIik7XHJcbmNvbnN0IGFzc2V0c0RpciA9IHBhdGguam9pbihkaXN0RGlyLCBcImFzc2V0c1wiKTtcclxuXHJcbmlmICghZnMuZXhpc3RzU3luYyhhc3NldHNEaXIpKSB7XHJcbiAgZnMubWtkaXJTeW5jKGFzc2V0c0RpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbn1cclxuXHJcbmNvbnN0IGZvbGRlcnNUb0NvcHkgPSBbXCJjc3NcIiwgXCJpbWFnZXNcIiwgXCJjb21wb25lbnRzXCJdO1xyXG5cclxuZm9sZGVyc1RvQ29weS5mb3JFYWNoKChmb2xkZXIpID0+IHtcclxuICBjb25zdCBzb3VyY2VQYXRoID0gcGF0aC5yZXNvbHZlKGZvbGRlcik7XHJcbiAgY29uc3QgdGFyZ2V0UGF0aCA9IHBhdGguam9pbihhc3NldHNEaXIsIGZvbGRlcik7XHJcblxyXG4gIGlmIChmcy5leGlzdHNTeW5jKHNvdXJjZVBhdGgpKSB7XHJcbiAgICBmcy5ta2RpclN5bmModGFyZ2V0UGF0aCwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcblxyXG4gICAgZnMucmVhZGRpclN5bmMoc291cmNlUGF0aCkuZm9yRWFjaCgoZmlsZSkgPT4ge1xyXG4gICAgICBmcy5jb3B5RmlsZVN5bmMocGF0aC5qb2luKHNvdXJjZVBhdGgsIGZpbGUpLCBwYXRoLmpvaW4odGFyZ2V0UGF0aCwgZmlsZSkpO1xyXG4gICAgICBjb25zb2xlLmxvZyhgXHVEODNEXHVEQ0MyIENvcGllZCAke2ZpbGV9IHRvIGRpc3QvYXNzZXRzLyR7Zm9sZGVyfS9gKTtcclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyBcdTI3MDUgXHUwNDEzXHUwNDMwXHUwNDQwXHUwNDMwXHUwNDNEXHUwNDQyXHUwNDM4XHUwNDQwXHUwNDNFXHUwNDMyXHUwNDMwXHUwNDNEXHUwNDNEXHUwNDNFIFx1MDQzQVx1MDQzRVx1MDQzRlx1MDQzOFx1MDQ0MFx1MDQ0M1x1MDQzNVx1MDQzQyBgaW5kZXguaHRtbGBcclxuY29uc3QgaW5kZXhIdG1sUGF0aCA9IHBhdGgucmVzb2x2ZShcImluZGV4Lmh0bWxcIik7XHJcbmNvbnN0IHRhcmdldEluZGV4SHRtbFBhdGggPSBwYXRoLmpvaW4oZGlzdERpciwgXCJpbmRleC5odG1sXCIpO1xyXG5cclxuaWYgKGZzLmV4aXN0c1N5bmMoaW5kZXhIdG1sUGF0aCkpIHtcclxuICBmcy5jb3B5RmlsZVN5bmMoaW5kZXhIdG1sUGF0aCwgdGFyZ2V0SW5kZXhIdG1sUGF0aCk7XHJcbiAgY29uc29sZS5sb2coYFx1RDgzRFx1RENDMiBDb3BpZWQgaW5kZXguaHRtbCB0byBkaXN0L2ApO1xyXG59XHJcblxyXG4vLyBcdTI3MDUgXHUwNDFGXHUwNDQwXHUwNDNFXHUwNDMyXHUwNDM1XHUwNDQwXHUwNDRGXHUwNDM1XHUwNDNDLCBcdTA0NDdcdTA0NDJcdTA0M0UgYGluZGV4LmpzYCBcdTA0NDFcdTA0M0VcdTA0MzdcdTA0MzRcdTA0MzBcdTA0M0JcdTA0NDFcdTA0NEZcclxuY29uc3QgaW5kZXhKc1BhdGggPSBwYXRoLmpvaW4oZGlzdERpciwgXCJpbmRleC5qc1wiKTtcclxuaWYgKCFmcy5leGlzdHNTeW5jKGluZGV4SnNQYXRoKSkge1xyXG4gIGNvbnNvbGUuZXJyb3IoXCJcdTI3NEMgXHUwNDFFXHUwNDQ4XHUwNDM4XHUwNDMxXHUwNDNBXHUwNDMwOiBgaW5kZXguanNgIFx1MDQzRFx1MDQzNSBcdTA0MzFcdTA0NEJcdTA0M0IgXHUwNDQxXHUwNDNFXHUwNDM3XHUwNDM0XHUwNDMwXHUwNDNEISBcdTA0MUZcdTA0NDBcdTA0M0VcdTA0MzJcdTA0MzVcdTA0NDBcdTA0NEZcdTA0MzkgYG1haW4uanN4YC5cIik7XHJcbiAgcHJvY2Vzcy5leGl0KDEpO1xyXG59XHJcblxyXG5cclxuXHJcblxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQ0EsU0FBUyxvQkFBb0I7QUFDN0IsT0FBTyxXQUFXO0FBQ2xCLE9BQU8sUUFBUTtBQUNmLE9BQU8sVUFBVTtBQUVqQixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixNQUFNO0FBQUE7QUFBQSxFQUNOLFNBQVMsQ0FBQyxNQUFNLENBQUM7QUFBQSxFQUNqQixPQUFPO0FBQUEsSUFDTCxRQUFRO0FBQUEsSUFDUixhQUFhO0FBQUEsSUFDYixXQUFXO0FBQUEsSUFDWCxlQUFlO0FBQUEsTUFDYixPQUFPO0FBQUE7QUFBQSxNQUNQLFFBQVE7QUFBQSxRQUNOLGdCQUFnQjtBQUFBO0FBQUEsUUFDaEIsZ0JBQWdCO0FBQUEsUUFDaEIsZ0JBQWdCO0FBQUEsTUFDbEI7QUFBQSxJQUNGO0FBQUEsRUFDRjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsS0FBSztBQUFBO0FBQUEsRUFDUDtBQUNGLENBQUM7QUFHRCxJQUFNLFVBQVUsS0FBSyxRQUFRLE1BQU07QUFDbkMsSUFBTSxZQUFZLEtBQUssS0FBSyxTQUFTLFFBQVE7QUFFN0MsSUFBSSxDQUFDLEdBQUcsV0FBVyxTQUFTLEdBQUc7QUFDN0IsS0FBRyxVQUFVLFdBQVcsRUFBRSxXQUFXLEtBQUssQ0FBQztBQUM3QztBQUVBLElBQU0sZ0JBQWdCLENBQUMsT0FBTyxVQUFVLFlBQVk7QUFFcEQsY0FBYyxRQUFRLENBQUMsV0FBVztBQUNoQyxRQUFNLGFBQWEsS0FBSyxRQUFRLE1BQU07QUFDdEMsUUFBTSxhQUFhLEtBQUssS0FBSyxXQUFXLE1BQU07QUFFOUMsTUFBSSxHQUFHLFdBQVcsVUFBVSxHQUFHO0FBQzdCLE9BQUcsVUFBVSxZQUFZLEVBQUUsV0FBVyxLQUFLLENBQUM7QUFFNUMsT0FBRyxZQUFZLFVBQVUsRUFBRSxRQUFRLENBQUMsU0FBUztBQUMzQyxTQUFHLGFBQWEsS0FBSyxLQUFLLFlBQVksSUFBSSxHQUFHLEtBQUssS0FBSyxZQUFZLElBQUksQ0FBQztBQUN4RSxjQUFRLElBQUksb0JBQWEsSUFBSSxtQkFBbUIsTUFBTSxHQUFHO0FBQUEsSUFDM0QsQ0FBQztBQUFBLEVBQ0g7QUFDRixDQUFDO0FBR0QsSUFBTSxnQkFBZ0IsS0FBSyxRQUFRLFlBQVk7QUFDL0MsSUFBTSxzQkFBc0IsS0FBSyxLQUFLLFNBQVMsWUFBWTtBQUUzRCxJQUFJLEdBQUcsV0FBVyxhQUFhLEdBQUc7QUFDaEMsS0FBRyxhQUFhLGVBQWUsbUJBQW1CO0FBQ2xELFVBQVEsSUFBSSxzQ0FBK0I7QUFDN0M7QUFHQSxJQUFNLGNBQWMsS0FBSyxLQUFLLFNBQVMsVUFBVTtBQUNqRCxJQUFJLENBQUMsR0FBRyxXQUFXLFdBQVcsR0FBRztBQUMvQixVQUFRLE1BQU0sNExBQTBEO0FBQ3hFLFVBQVEsS0FBSyxDQUFDO0FBQ2hCOyIsCiAgIm5hbWVzIjogW10KfQo=
