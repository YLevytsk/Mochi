{"version":3,"file":"mainJS.js","sources":["../main.jsx"],"sourcesContent":["import ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\n\r\n// Функция для выравнивания всех кнопок по максимальной ширине\r\nfunction adjustNavLinks() {\r\n  const navLinks = document.querySelectorAll(\".nav-link\");\r\n\r\n  let maxWidth = 295;\r\n\r\n  if (navLinks.length === 0) return;\r\n\r\n  navLinks.forEach((link) => {\r\n    link.style.width = `${maxWidth}px`;\r\n\r\n    link.addEventListener(\"mouseenter\", () => {\r\n      link.style.backgroundColor = \"#E86868\";\r\n      link.style.transition = \"background-color 0.3s ease\";\r\n    });\r\n\r\n    link.addEventListener(\"mouseleave\", () => {\r\n      link.style.backgroundColor = \"inherit\";\r\n    });\r\n  });\r\n}\r\n\r\n// Следим за изменениями в `#root`\r\nconst observer = new MutationObserver(() => {\r\n  adjustNavLinks();\r\n});\r\nobserver.observe(document.getElementById(\"root\"), { childList: true, subtree: true });\r\n\r\n// Рендерим приложение в `#root`\r\nconst rootElement = document.getElementById(\"root\");\r\nif (rootElement) {\r\n  const root = ReactDOM.createRoot(rootElement);\r\n  root.render(<App />);\r\n}\r\n\r\n\r\n\r\n\r\n \r\n  \r\n  "],"names":["adjustNavLinks","navLinks","maxWidth","link","observer","rootElement","ReactDOM","jsx","App"],"mappings":"oGAIA,SAASA,GAAiB,CAClB,MAAAC,EAAW,SAAS,iBAAiB,WAAW,EAEtD,IAAIC,EAAW,IAEXD,EAAS,SAAW,GAEfA,EAAA,QAASE,GAAS,CACpBA,EAAA,MAAM,MAAQ,GAAGD,CAAQ,KAEzBC,EAAA,iBAAiB,aAAc,IAAM,CACxCA,EAAK,MAAM,gBAAkB,UAC7BA,EAAK,MAAM,WAAa,4BAAA,CACzB,EAEIA,EAAA,iBAAiB,aAAc,IAAM,CACxCA,EAAK,MAAM,gBAAkB,SAAA,CAC9B,CAAA,CACF,CACH,CAGA,MAAMC,EAAW,IAAI,iBAAiB,IAAM,CAC3BJ,EAAA,CACjB,CAAC,EACDI,EAAS,QAAQ,SAAS,eAAe,MAAM,EAAG,CAAE,UAAW,GAAM,QAAS,GAAM,EAGpF,MAAMC,EAAc,SAAS,eAAe,MAAM,EAC9CA,GACWC,EAAS,WAAWD,CAAW,EACvC,OAAQE,EAAAA,IAAAC,EAAA,CAAI,CAAA,CAAE"}